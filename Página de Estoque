import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
from datetime import datetime

class HistoricoMovimentacao:
    def __init__(self):
        self.movimentacoes = []
    
    def registrar_movimentacao(self, produto, tipo, quantidade, data=None):
        if data is None:
            data = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        self.movimentacoes.append({
            "data": data,
            "produto": produto,
            "tipo": tipo,
            "quantidade": quantidade
        })

class ControleEstoque:
    def __init__(self):
        # Janela principal
        self.janela = tk.Tk()
        self.janela.title("Controle de Estoque - Loja TECNOPOINT")
        self.janela.geometry("700x500")
        self.janela.configure(bg="#0066CC")

        # Lista de produtos e histórico
        self.estoque = []
        self.historico = HistoricoMovimentacao()

        tk.Label(self.janela, text="Controle de Estoque - Loja TECNOPOINT", font=("Arial", 16, 'bold'), bg="#0066CC", fg="white").pack(pady=10)

        # Frame para exibir o estoque
        self.frame_estoque = tk.Frame(self.janela, bg="#0066CC")
        self.frame_estoque.pack(pady=10)

        # Tabela de produtos
        self.tabela = ttk.Treeview(self.frame_estoque, columns=("Produto", "Marca", "Quantidade", "Preço", "Limite Mínimo"), show="headings")
        self.tabela.heading("Produto", text="Produto")
        self.tabela.heading("Marca", text="Marca")
        self.tabela.heading("Quantidade", text="Quantidade")
        self.tabela.heading("Preço", text="Preço (R$)")
        self.tabela.heading("Limite Mínimo", text="Limite Mínimo")
        self.tabela.pack()

        # Botões de funcionalidade
        self.botao_frame = tk.Frame(self.janela, bg="#0066CC")
        self.botao_frame.pack(pady=10)

        tk.Button(self.botao_frame, text="Adicionar Produto", command=self.abrir_janela_adicionar, bg="white", fg="black").grid(row=0, column=0, padx=5)
        tk.Button(self.botao_frame, text="Consultar Produto", command=self.abrir_janela_consulta, bg="white", fg="black").grid(row=0, column=1, padx=5)
        tk.Button(self.botao_frame, text="Atualizar Produto", command=self.abrir_janela_atualizar, bg="white", fg="black").grid(row=0, column=2, padx=5)
        tk.Button(self.botao_frame, text="Excluir Produto", command=self.excluir_produto, bg="white", fg="black").grid(row=0, column=3, padx=5)
        tk.Button(self.botao_frame, text="Relatório de Baixo Estoque", command=self.relatorio_baixo_estoque, bg="white", fg="black").grid(row=0, column=4, padx=5)
        tk.Button(self.botao_frame, text="Histórico de Movimentações", command=self.mostrar_historico, bg="white", fg="black").grid(row=0, column=5, padx=5)

        self.janela.mainloop()

    def mostrar_historico(self):
        janela_historico = tk.Toplevel(self.janela)
        janela_historico.title("Histórico de Movimentações")
        janela_historico.geometry("800x400")
        janela_historico.configure(bg="#0066CC")

        frame_tabela = tk.Frame(janela_historico, bg="#0066CC")
        frame_tabela.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)

        tabela_historico = ttk.Treeview(
            frame_tabela,
            columns=("Data", "Produto", "Tipo", "Quantidade"),
            show="headings"
        )
        
        tabela_historico.heading("Data", text="Data")
        tabela_historico.heading("Produto", text="Produto")
        tabela_historico.heading("Tipo", text="Tipo")
        tabela_historico.heading("Quantidade", text="Quantidade")
        
        tabela_historico.column("Data", width=150)
        tabela_historico.column("Produto", width=200)
        tabela_historico.column("Tipo", width=100)
        tabela_historico.column("Quantidade", width=100)

        scrollbar = ttk.Scrollbar(frame_tabela, orient=tk.VERTICAL, command=tabela_historico.yview)
        tabela_historico.configure(yscrollcommand=scrollbar.set)
        
        tabela_historico.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        for mov in self.historico.movimentacoes:
            tabela_historico.insert(
                "",
                "end",
                values=(mov["data"], mov["produto"], mov["tipo"], mov["quantidade"])
            )

    def registrar_movimentacao(self, produto, tipo, quantidade):
        self.historico.registrar_movimentacao(produto, tipo, quantidade)

    def abrir_janela_adicionar(self):
        janela_adicionar = tk.Toplevel(self.janela)
        janela_adicionar.title("Adicionar Produto")
        janela_adicionar.configure(bg="#0066CC")

        tk.Label(janela_adicionar, text="Produto:", bg="#0066CC", fg="white").grid(row=0, column=0, pady=5)
        produto_entry = tk.Entry(janela_adicionar)
        produto_entry.grid(row=0, column=1, pady=5)

        tk.Label(janela_adicionar, text="Marca:", bg="#0066CC", fg="white").grid(row=1, column=0, pady=5)
        marca_entry = tk.Entry(janela_adicionar)
        marca_entry.grid(row=1, column=1, pady=5)

        tk.Label(janela_adicionar, text="Quantidade:", bg="#0066CC", fg="white").grid(row=2, column=0, pady=5)
        quantidade_entry = tk.Entry(janela_adicionar)
        quantidade_entry.grid(row=2, column=1, pady=5)

        tk.Label(janela_adicionar, text="Preço:", bg="#0066CC", fg="white").grid(row=3, column=0, pady=5)
        preco_entry = tk.Entry(janela_adicionar)
        preco_entry.grid(row=3, column=1, pady=5)

        tk.Label(janela_adicionar, text="Limite Mínimo:", bg="#0066CC", fg="white").grid(row=4, column=0, pady=5)
        limite_minimo_entry = tk.Entry(janela_adicionar)
        limite_minimo_entry.grid(row=4, column=1, pady=5)

        def confirmar():
            produto = produto_entry.get()
            marca = marca_entry.get()
            try:
                quantidade = int(quantidade_entry.get())
                preco = float(preco_entry.get())
                limite_minimo = int(limite_minimo_entry.get())
            except ValueError:
                messagebox.showerror("Erro", "Quantidade, preço e limite mínimo devem ser numéricos!")
                return

            self.estoque.append((produto, marca, quantidade, preco, limite_minimo))
            self.registrar_movimentacao(produto, "Entrada", quantidade)
            self.atualizar_tabela()
            janela_adicionar.destroy()

        tk.Button(janela_adicionar, text="Cadastrar", command=confirmar, bg="white", fg="black").grid(row=5, column=0, columnspan=2, pady=10)

    def abrir_janela_consulta(self):
        janela_consulta = tk.Toplevel(self.janela)
        janela_consulta.title("Consultar Produto")
        janela_consulta.configure(bg="#0066CC")

        tk.Label(janela_consulta, text="Produto a consultar:", bg="#0066CC", fg="white").grid(row=0, column=0, pady=5)
        produto_entry = tk.Entry(janela_consulta)
        produto_entry.grid(row=0, column=1, pady=5)

        def consultar():
            nome_produto = produto_entry.get()
            produto_encontrado = None
            for produto in self.estoque:
                if produto[0].lower() == nome_produto.lower():
                    produto_encontrado = produto
                    break
            if produto_encontrado:
                relatorio = f"Produto: {produto_encontrado[0]}\n" \
                            f"Marca: {produto_encontrado[1]}\n" \
                            f"Quantidade: {produto_encontrado[2]}\n" \
                            f"Preço: R${produto_encontrado[3]:.2f}\n" \
                            f"Limite Mínimo: {produto_encontrado[4]}"
                messagebox.showinfo("Produto Encontrado", relatorio)
            else:
                messagebox.showerror("Erro", "Produto não encontrado.")

        tk.Button(janela_consulta, text="Consultar", command=consultar, bg="white", fg="black").grid(row=1, column=0, columnspan=2, pady=10)

    def abrir_janela_atualizar(self):
        janela_atualizar = tk.Toplevel(self.janela)
        janela_atualizar.title("Atualizar Produto")
        janela_atualizar.configure(bg="#0066CC")

        tk.Label(janela_atualizar, text="Produto a atualizar:", bg="#0066CC", fg="white").grid(row=0, column=0, pady=5)
        produto_entry = tk.Entry(janela_atualizar)
        produto_entry.grid(row=0, column=1, pady=5)

        tk.Label(janela_atualizar, text="Nova Quantidade:", bg="#0066CC", fg="white").grid(row=1, column=0, pady=5)
        nova_quantidade_entry = tk.Entry(janela_atualizar)
        nova_quantidade_entry.grid(row=1, column=1, pady=5)

        tk.Label(janela_atualizar, text="Novo Preço:", bg="#0066CC", fg="white").grid(row=2, column=0, pady=5)
        novo_preco_entry = tk.Entry(janela_atualizar)
        novo_preco_entry.grid(row=2, column=1, pady=5)

        def atualizar():
            nome_produto = produto_entry.get()
            nova_quantidade = nova_quantidade_entry.get()
            novo_preco = novo_preco_entry.get()

            produto_encontrado = None
            for i, produto in enumerate(self.estoque):
                if produto[0].lower() == nome_produto.lower():
                    produto_encontrado = i
                    break

            if produto_encontrado is not None:
                try:
                    nova_quantidade = int(nova_quantidade)
                    novo_preco = float(novo_preco)
                except ValueError:
                    messagebox.showerror("Erro", "Quantidade e preço devem ser numéricos!")
                    return

                produto_atual = self.estoque[produto_encontrado]
                diferenca_quantidade = nova_quantidade - produto_atual[2]
                
                produto_atualizado = list(produto_atual)
                produto_atualizado[2] = nova_quantidade
                produto_atualizado[3] = novo_preco
                self.estoque[produto_encontrado] = tuple(produto_atualizado)

                if diferenca_quantidade > 0:
                    self.registrar_movimentacao(nome_produto, "Entrada", diferenca_quantidade)
                elif diferenca_quantidade < 0:
                    self.registrar_movimentacao(nome_produto, "Saída", abs(diferenca_quantidade))

                self.atualizar_tabela()
                janela_atualizar.destroy()
                messagebox.showinfo("Produto Atualizado", "Produto atualizado com sucesso!")
            else:
                messagebox.showerror("Erro", "Produto não encontrado.")

        tk.Button(janela_atualizar, text="Atualizar", command=atualizar, bg="white", fg="black").grid(row=3, column=0, columnspan=2, pady=10)

    def excluir_produto(self):
        item_selecionado = self.tabela.selection()
        if item_selecionado:
            for item in item_selecionado:
                valores = self.tabela.item(item)['values']
                self.registrar_movimentacao(valores[0], "Exclusão", valores[2])
                index = self.tabela.index(item)
                self.estoque.pop(index)
                self.tabela.delete(item)
        else:
            messagebox.showerror("Erro", "Nenhum produto selecionado para exclusão.")

    def relatorio_baixo_estoque(self):
        baixo_estoque = [produto for produto in self.estoque if produto[2] <= produto[4]]
        if baixo_estoque:
            relatorio = "\n".join([f"{p[0]} - Quantidade: {p[2]} (Limite Mínimo: {p[4]})" for p in baixo_estoque])
            messagebox.showinfo("Relatório de Baixo Estoque", relatorio)
        else:
            messagebox.showinfo("Relatório de Baixo Estoque", "Nenhum produto com baixo estoque")

    def atualizar_tabela(self):
        for item in self.tabela.get_children():
            self.tabela.delete(item)
        for produto in self.estoque:
            self.tabela.insert("", "end", values=produto)

# Inicialização do sistema
ControleEstoque()
